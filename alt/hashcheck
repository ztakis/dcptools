#!/bin/bash

version=v1.5

temp="/home/$USER/HashCheckLogs"
default_sources_dir="/mnt/nvme0n1p1/DCPsources"

#######################  Colors  #######################

b_red='\033[0;91m'
b_green='\033[1;92m'
b_yellow='\033[0;93m'
b_blue='\033[1;94m'
clear='\033[0m'

######################  Functions  #####################

function bytecheck {
    echo -en "${b_blue}Continue?${clear} (y/N): "
    read -rp "" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1
    echo; echo -en "${b_blue}Drag and drop source folder and press [ENTER]: ${clear}"
    read -re input
    source=$(echo "$input" | tr -d "'")
    if [ -z "$source" ]; then
        echo; echo -e "---------------- ${b_yellow}DCP source(s)${clear} -----------------"; echo
        du -sb $default_sources_dir/*/
        echo; echo -e "------------- ${b_yellow}Destination disk(s)${clear} --------------"; echo
        # du -sb --exclude={lost+found/,"System Volume Information"/} /media/$USER/*/*/
        du -sb --exclude=lost+found/ /media/"$USER"/*/*/
    else
        sources_dir=$(dirname "$source")
        dcp=$(basename "$source")
        echo; echo -e "---------------- ${b_yellow}DCP source(s)${clear} -----------------"; echo
        du -sb "$sources_dir/$dcp"/
        echo; echo -e "------------- ${b_yellow}Destination disk(s)${clear} --------------"; echo
        du -sb --exclude=lost+found/ /media/"$USER"/*/"$dcp"/
    fi
}

function get_source {
    echo; echo -en "${b_blue}Drag and drop source folder and press [ENTER]: ${clear}"
    read -re input
    source=$(echo "$input" | tr -d "'")
    dcp=$(basename "$source")
    echo -e "${b_yellow}DCP source is:${clear} $source"
    echo -en "${b_blue}Continue?${clear} (y/N): "
    read -rp "" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1
}

function make_source_hashes {

    if [ -f "$temp"/hashes.sha1 ]; then
        rm -f "$temp"/hashes.sha1
    fi
    for tmp_file in "$temp"/*.tmp; do
        if [ -f "$tmp_file" ]; then
            rm -f "$temp"/*.tmp
        fi
    done
    xmllint "$source"/PKL_* --xpath '//*[local-name()="Asset"]/*[local-name()="Id"]/text() | //*[local-name()="Hash"]/text()' | xargs -n2 | sort >> "$temp"/hashes.tmp
    xmllint "$source"/ASSETMAP* --xpath '//*[local-name()="Asset"]/*[local-name()="Id"]/text() | //*[local-name()="Path"]/text()' | xargs -n2 | grep -v PKL_ | sort >> "$temp"/paths.tmp
    paste -d " " "$temp"/hashes.tmp "$temp"/paths.tmp | awk '$1=$3{print $2,$4}' >> "$temp"/combo.tmp
    awk '{print $1}' < "$temp"/combo.tmp | while IFS= read -r line; do
    echo -n "$line" | base64 -d | od -t x1 -An | tr -d '\n' | tr -d ' ' | xargs echo >> "$temp"/hex.tmp; done
    paste -d " " "$temp"/hex.tmp "$temp"/paths.tmp | awk '{print $1,"*./"$3}' >> "$temp"/hashes.sha1
    rm "$temp"/*.tmp
}

function cleanup {
    kill -9 "$SPIN_PID"
    pkill -9 -f sha1sum
    echo; echo "Received CTRL-C"; sleep .5
    echo; echo -e "${b_yellow}Cleaning up...${clear}"
    rm -f "$temp"/hashes.sha1; sleep 1
    echo; echo -e "${b_red}Aborting...${clear}"; echo; exit
}

function spinner {
  arr=("-" "\\" "|" "/" "-")
  while true; do
    for x in "${arr[@]}"; do
      echo -en "\r${b_yellow}Please wait...${clear}  $x  Time elapsed: $(date -ud @$(( SECONDS - start )) +%T) "
      sleep .025
    done
  done
}

function header {
    echo -en "${b_blue}Continue?${clear} (y/N): "
    read -rp "" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1
    get_source
    if [ "$1" == "-b" ]; then
        counter=0
        for y in /media/"$USER"/*/"$dcp"/; do
            [ -e "$y" ] || break 
            ((counter++))
        done
        echo "Found $counter disks in /media"
        echo -en "${b_blue}Enter number of disk(s) for each batch : ${clear}"
        read -rp "" threads
        if [[ "$threads" -gt "$counter" || "$threads" -eq "0" ]]
            then
                echo "Invalid input"; exit 1
        fi
        echo -en "${b_blue}Continue?${clear} (y/N): "
        read -rp "" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1
    fi
    start=$SECONDS
    make_source_hashes
    echo
    spinner &
    SPIN_PID=$!
    disown
    trap cleanup SIGINT
}

function footer {
    wait &&
    sleep 1; kill -9 $SPIN_PID; echo; echo; sleep 1
    rm -f "$temp"/hashes.sha1
    echo -e "${b_green}Finished in:  $(date -ud @$(( SECONDS - start )) +%T)${clear}"
}

function hashcheck {
    header
    for dest in /media/"$USER"/*/"$dcp"/; do
        [ -e "$dest" ] || break
        k=$(echo "$dest" | grep -o -P "(?<=/media/$USER/).*(?=/$dcp/)")
        cd "$dest" || exit 1
        sha1sum -c "$temp"/hashes.sha1 | tee -a "$temp"/"$(date '+%y%m%d%H%M')_$k".log | grep "FAILED" &
    done
    footer
}

function hashcheck_b {
    header -b
    for i in /media/"$USER"/*/"$dcp"/; do
        [ -e "$i" ] || break 
        if (( j % threads == 0 )); then wait; fi
        ((j++))
        k=$(echo "$i" | grep -o -P "(?<=/media/$USER/).*(?=/$dcp/)")
        cd "$i" || exit 1
        sha1sum -c "$temp"/hashes.sha1 | tee -a "$temp"/"$(date '+%y%m%d%H%M')_$k".log | grep "FAILED" &
    done
    footer
}

function hashcheck_s {
    header
    cd "$source" || exit 1
    sha1sum -c "$temp"/hashes.sha1
    # sha1sum -c "$temp"/hashes.sha1 | tee -a "$temp"/"$dcp""_$(date '+%y%m%d%H%M').log" | grep "FAILED"
    footer
}

#########################  Main  ########################

# Show version
echo; echo -e "${b_blue}hashcheck_cli${clear} ${b_green}$version${clear}"

# Selection menu
echo; echo "------------------------"
echo -e "${b_blue}Select to continue:     ${clear}"
echo "------------------------"
export COLUMNS=20
select opt in "Bytecheck" "Hashcheck all" "Hashcheck in batches" "Single hashcheck" "Exit"; do
    case $opt in
        "Bytecheck") echo; echo -e "${b_yellow}$opt${clear}"; bytecheck; break;;
        "Hashcheck all") echo; echo -e "${b_yellow}$opt${clear}"; hashcheck; break;;
        "Hashcheck in batches") echo; echo -e "${b_yellow}$opt${clear}"; hashcheck_b; break;;
        "Single hashcheck") echo; echo -e "${b_yellow}$opt${clear}"; hashcheck_s; break;;
        "Exit") echo; echo -e "${b_yellow}Bye!${clear}"; echo; exit;;
        * ) echo "Invalid option"
    esac
done

echo; exit 0