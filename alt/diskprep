#!/bin/bash

version=v1.6

label=$1
protected_disks='nvme|sda|sdb|sdc'

#######################  Colors  #######################

b_red='\033[0;91m'
b_green='\033[1;92m'
b_yellow='\033[0;93m'
b_blue='\033[1;94m'
clear='\033[0m'

######################  Functions  #####################

function spinner {
    arr=("-" "\\" "|" "/" "-")
    while true; do
        for x in "${arr[@]}"; do
            echo -en "\r${b_yellow}Please wait...${clear}  $x  Time elapsed: $(date -ud @$(( SECONDS - start )) +%T) "
            sleep .025
        done
    done
}

function list_disk {
    lsblk | grep disk | awk '{print $1}' | grep -Ev $protected_disks | sort
}

function count_disk {
    counter=0
    for y in $(list_disk); do
    ((counter++))
        if [ "$1" == "-v" ]; then
            echo "Found disk: $y"
        fi
    done
    echo; echo -e "${b_blue}Total disks found:  $counter${clear}"
}

function automount_disk {
    echo -e "${b_blue}Automounting disks...${clear}"; echo
    for z in $(list_disk); do
        sudo -u "${SUDO_USER}" udisksctl mount --options noatime -b /dev/"$z"1
    done
}

function header {
    echo -en "${b_blue}Continue?${clear} (y/N): "
    read -rp "" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1
    start=$SECONDS
    echo
    spinner &
    SPIN_PID=$!
    disown
}

function footer {
    sleep 1; kill -9 $SPIN_PID; echo; echo; sleep 1
    echo -e "${b_green}Finished in:  $(date -ud @$(( SECONDS - start )) +%T)${clear}"
    sleep 1; echo; automount_disk
    echo; echo -e "${b_blue}Showing disk list:${clear}"; echo
    lsblk -o name,type,size,label,fstype,mountpoint | grep -Ev $protected_disks
    count_disk; echo
}

function init_disk {
    trap "" SIGINT  # No Ctrl-C allowed
    header
    for i in $(list_disk); do
        parted --script /dev/"$i" mklabel msdos -a optimal mkpart primary ext2 0% 100%
        partprobe /dev/"$i"
        sleep 1
    done
    for i in $(list_disk); do
        mkfs.ext2 -q -I 128 -L "$label" -F /dev/"$i"'1' &
        partprobe /dev/"$i"
        sleep 1
    done
    wait &&
    footer
}

function init_disk_b {
    trap "" SIGINT  # No Ctrl-C allowed
    echo -en "${b_blue}Enter number of disk(s) for each batch : ${clear}"
    read -rp "" threads
    if [[ "$threads" -gt "$counter" || "$threads" -eq "0" ]]
        then
            echo "Invalid input"; exit 1
    fi
    header
    for i in $(list_disk); do
        parted --script /dev/"$i" mklabel msdos -a optimal mkpart primary ext2 0% 100%
        partprobe /dev/"$i"
        sleep 1
    done
    for i in $(list_disk); do
        if (( j % threads == 0 )); then
            wait
        fi
        ((j++))
        mkfs.ext2 -q -I 128 -L "$label" -F /dev/"$i"'1' &
        partprobe /dev/"$i"
        sleep 1
    done
    wait &&
    footer
}

function label_disk {
    trap "" SIGINT  # No Ctrl-C allowed
    header
    for i in $(list_disk); do
        e2label /dev/"$i"'1' "$label" && sleep 1
    done
    footer
}

function sanity_checks {
    # check if we are root
    if [ $EUID -ne 0 ]; then
        echo; echo -e "${b_yellow}Error: Must be root${clear}"; echo; exit 1
    fi
    # check if label parameter is missing
    if [ -z "$label" ]
        then
            echo -e "${b_yellow}Error: No label defined${clear}"; echo; exit 1
        else
            echo -e "Label ${b_blue}$label${clear} has ${b_blue}${#label}${clear} characters"
    fi
    # check if label has more than 16 characters
    if [ ${#label} -gt 16 ]
        then
            echo -e "${b_yellow}Error: label has more than 16 characters !!!${clear}"
            echo; exit 1
    fi
    # check if any disks are plugged in
    if [ -z "$(list_disk)" ]
        then
            echo; echo -e "${b_yellow}Error: No disk(s) found${clear}"; echo; exit 1
    fi
    # unmount disks in /media/user
    if grep '/dev/sd' /proc/mounts | grep -Evq $protected_disks
        then
            echo; echo -e "${b_yellow}Found mounted disk(s). Unmounting...${clear}"
            umount -f /media/"$SUDO_USER"/*
    fi
    # recheck if any disks are still mounted
    if grep '/dev/sd' /proc/mounts | grep -Evq $protected_disks
        then
            echo; echo -e "${b_yellow}Error: Unmounting disk(s) failed. Exiting...${clear}"; echo; exit 1
    fi
}

####################  Main section  #####################

# Show version
echo; echo -e "${b_blue}disk_prep_cli  ${clear}${b_green}$version${clear}"
# Some sanity checks
sanity_checks
# Show number of disks found
echo; count_disk -v; echo
# Show warning
echo -e "Protected disks: ${b_yellow}$protected_disks${clear}"; echo
echo -e "${b_red}!!! =================== WARNING =================== !!!${clear}"
echo -e "${b_yellow}!!! Any removable ${clear}${b_red}source${clear}${b_yellow} disk will be formatted too !!!${clear}"; echo
# Selection menu
echo "------------------------"
echo -e "${b_blue}Select to continue:     ${clear}"
echo "------------------------"
export COLUMNS=20
select opt in "Initialize all" "Initialize in batches" "Label only" "Exit"
    do
        case $opt in
            "Initialize all") echo; echo -e "${b_yellow}$opt${clear}"; init_disk; break;;
            "Initialize in batches") echo; echo -e "${b_yellow}$opt${clear}"; init_disk_b; break;;
            "Label only") echo; echo -e "${b_yellow}$opt${clear}"; label_disk; break;;
            "Exit") echo; echo -e "${b_yellow}Bye!${clear}"; echo; trap - SIGINT; exit;;
            * ) echo "Invalid option"
        esac
    done
# Ctrl-C restored to default
trap - SIGINT
exit 0